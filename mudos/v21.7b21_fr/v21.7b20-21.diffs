diff -cr v21.7b20/ChangeLog.beta v21.7b21/ChangeLog.beta
*** v21.7b20/ChangeLog.beta	Thu Apr 11 10:45:02 1996
--- v21.7b21/ChangeLog.beta	Tue Apr 23 15:38:40 1996
***************
*** 1,3 ****
--- 1,8 ----
+ Thu Apr 11 21:04:27 EDT 1996 (tim@handel.princeton.edu (Beek))
+ 	* raised patchlevel to v21.7b21
+ 	* fixed a bug in replace_program() which would sometimes zero out
+ 	  too many/the wrong variables
+ 
  Sun Mar 10 04:49:28 EST 1996 (tim@handel.princeton.edu (Beek))
  	* raised patchlevel to v21.7b20
  	* removed abort() prototype from lint.h; SunOS defines it as int
diff -cr v21.7b20/patchlevel.h v21.7b21/patchlevel.h
*** v21.7b20/patchlevel.h	Thu Apr 11 20:59:32 1996
--- v21.7b21/patchlevel.h	Tue Apr 23 16:16:37 1996
***************
*** 1 ****
! #define PATCH_LEVEL "v21.7b20"
--- 1 ----
! #define PATCH_LEVEL "v21.7b21"
diff -cr v21.7b20/replace_program.c v21.7b21/replace_program.c
*** v21.7b20/replace_program.c	Sun Mar 10 04:45:17 1996
--- v21.7b21/replace_program.c	Tue Apr 23 15:30:45 1996
***************
*** 19,25 ****
  void replace_programs()
  {
      replace_ob_t *r_ob, *r_next;
!     int i, j;
      svalue_t *svp;
  
  #ifdef DEBUG
--- 19,25 ----
  void replace_programs()
  {
      replace_ob_t *r_ob, *r_next;
!     int i, num_fewer, offset;
      svalue_t *svp;
  
  #ifdef DEBUG
***************
*** 31,69 ****
  
  	if (r_ob->ob->flags & O_SWAPPED)
  	    load_ob_from_swap(r_ob->ob);
! 	i = r_ob->ob->prog->num_variables - r_ob->new_prog->num_variables;
  #ifdef DEBUG
  	if (d_flag)
! 	    debug_message("%d less variables\n", i);
  #endif
! 	tot_alloc_object_size -= i * sizeof(svalue_t[1]);
! 	svp = r_ob->ob->variables;
! 	j = r_ob->var_offset;
! 	i -= j;
! #ifdef DEBUG
! 	if (d_flag)
! 	    debug_message("freeing %d variables:\n", j);
! #endif
! 	while (--j >= 0) {
! 	    free_svalue(svp, "replace_programs");
! 	    *(svp++) = const0n;
! 	}
! #ifdef DEBUG
! 	if (d_flag)
! 	    debug_message("freed.\n");
! #endif
! 	if (r_ob->var_offset) {
! 	    for (j = 0; j < (int) r_ob->new_prog->num_variables; j++)
! 		r_ob->ob->variables[j] = svp[j];
! 	    svp += j;
! 	}
! #ifdef DEBUG
! 	if (d_flag)
! 	    debug_message("freeing %d variables:\n", i);
! #endif
! 	while (--i >= 0) {
! 	    free_svalue(svp, "replace_programs");
! 	    *(svp++) = const0n;
  	}
  #ifdef DEBUG
  	if (d_flag)
--- 31,63 ----
  
  	if (r_ob->ob->flags & O_SWAPPED)
  	    load_ob_from_swap(r_ob->ob);
! 	num_fewer = r_ob->ob->prog->num_variables - r_ob->new_prog->num_variables;
  #ifdef DEBUG
  	if (d_flag)
! 	    debug_message("%d less variables\n", num_fewer);
  #endif
! 	tot_alloc_object_size -= num_fewer * sizeof(svalue_t[1]);
! 	if ((offset = r_ob->var_offset)) {
! 	    svp = r_ob->ob->variables;
! 	    /* move our variables up to the top */
! 	    for (i = 0; i < r_ob->new_prog->num_variables; i++) {
! 		free_svalue(svp, "replace_programs");
! 		*svp = *(svp + offset);
! 		*(svp + offset) = const0n;
! 		svp++;
! 	    }
! 	    /* free the rest */
! 	    for (i = 0; i < num_fewer; i++) {
! 		free_svalue(svp, "replace_programs");
! 		*svp++ = const0n;
! 	    }
! 	} else {
! 	    /* We just need to remove the last num_fewer variables */
! 	    svp = &r_ob->ob->variables[r_ob->new_prog->num_variables];
! 	    for (i = 0; i < num_fewer; i++) {
! 		free_svalue(svp, "replace_programs");
! 		*svp++ = const0n;
! 	    }
  	}
  #ifdef DEBUG
  	if (d_flag)
