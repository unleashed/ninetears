New-Coder 101:
 
You may know some of this stuff already, and if so, bear with me:
 
#include "path.h"
As a player, remember how you alais certain commands because you use them
over and over and it is much easier to type one or two letters instead of
several words?  The 'path.h' file is to coders, what alias is to players.
In addition to saving time and making things look neater, it increases
portability (Which means it is easy to move files from one directory to
another without having to adapt every single file to its new home - instead,
only the 'path.h' file needs to be changed)  If you get a chance, take a
look at one of the domain's 'path.h' just to get an idea of what is going
on inside the code.  I suggest:  more /d/ss/daggerford/path.h   Now, for
an example.  Assume the following statements are in a 'path.h' file:
   
   #define HOMEDIR "/w/nepenthe/" 
   #define CAPNAME this_player()->query_cap_name()
 
Now, within the actual room code, anyplace you would have had to type
"/w/nepenthe/" you just need to type HOMEDIR and anyplace you would have
had to type 'this_player()->query_cap_name()' you just need to type
CAPNAME.  For example:
 
   add_exit("north", HOMEDIR+"workroom.c", "door);
   add_exit("south", HOMEDIR+"secretgarden.c", "path");
 
Here are a couple of pointers:
   a. Personally, any definitions I give in the 'path.h' file, I capitalize.
      The reason for this, if you accidently use a function name that is
      already in existance, you can screw things up.  As no functions used
      by the MUD are capitalized, you don't ever have to worry about this.
   b. Don't overuse definitions in a 'path.h' file.  I've seen code that
      looks like the following:
         EXIT(N, HD+"secretgarden.c", D);
      The coder defined EXIT to represent add_exit, N to represent "north",
      etc.  This is VERY BAD practice and makes your room code difficult
      to follow.
   c. Do not put the semi-colon following a definition in a 'path.h' file
      because will add it to your definition.
   d. With anything you have defined as a string or is going to be used
      between strings you must within the room code put a '+' before or
      after the quotes.  This essentially adds both quotations (strings)
      together  (Note how HOMEDIR was added to "workroom.c", forming
      "/w/nepenthe/workroom.c")
   e. Try to make definition names appropriate so that your room code is
      easier to understand.  Having DORK represent the capitalized name 
      of a player is more difficult to interpret than CAPNAME would.
   f. Be sure to remember to #include "path.h" within the room code or
      your definitions won't be loaded and you will get errors.  Also, 
      make sure the 'path.h' file itself is in the SAME directory as the
      file that tries to access it, or again, you will get errors.
