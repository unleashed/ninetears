#include <spells.h>
inherit BASE_SPELL;

#define	NOMBRE	"Silencio"
#define	ESCUELA	({"alteracion"})
#define	ESFERA	({"guardiana"})
#define	CANCION	"'solus paqua quietum'"
#define	NIVEL	2

void setup()
{
  set_spell_name(NOMBRE);
  set_school(ESCUELA);
  set_sphere(ESFERA);
  set_spell_level(NIVEL);

  set_target_type("one");
  set_range(0);
  set_line_of_sight_needed(0);

  set_help_desc("This spell makes the recipient unable to speak, shout, or "
    "otherwise use his/her vocal chords.  Most importantly, the "
    "target will not be able to cast spells.  The spell lasts two "
    "rounds per level of the caster.");

  set_gp_cost(NIVEL);
  set_casting_time(1);
  set_rounds(({"round1"}));
}

int round1(object caster, mixed target, mixed out_range, int time, int quiet)
{
  object ob;

  if (!target)
  {
    tell_object(caster,MSG_NO_TARGET);
    return -1;
  }

  if (target->query_silence_spell())
  {
    tell_object(caster,MSG_AFECTADO);
    return -1;
  }

  if (!quiet)
  {
    tell_object(caster,MSG_CAN_C);
    tell_room(ENV(caster),MSG_CAN_R,caster);
  }

  if (caster->query_int()<random(target->QL))
  {
    tell_room(ENV(caster),caster->QCN+" completes the spell, but nothing seems to happen.\n",({target,caster}));
    tell_object(target, caster->QCN+" completes the spell, then stares intently at you, as if wondering why nothing happened.\n");
    tell_object(caster, "You complete the spell, but apparently "+target->QCN+" is unaffected.\n");
  }
  else
  {
    ob=clone_object(SHADOWS+"silence_sh");
    ob->setup_shadow(target);
    target->add_extra_look(ob);
    target->ATP("silence_on",1,caster->QL*MAX(POWER,1));
    target->ATP("nocast",1,caster->query_level()*MAX(POWER,1));

    tell_room(ENV(caster),caster->QCN+" gestures and "+target->QCN+"screams silently.\n",({caster,target}));
    tell_object(caster,"You silence "+target->QCN+", and "+target->query_pronoun()+" screams silently at you.\n");
    tell_object(target,caster->QCN+" gestures, and you feel a tightness in your throat, and you're unable to say a thing!\n");
  }
  if (!interactive(target)) target->attack_by(caster);
  return 0;
}
