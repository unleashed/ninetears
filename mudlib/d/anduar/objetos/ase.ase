int weapon_attack(object defdr, object atckr,int damage_roll,int critico)
{
  mixed *att_val;                // Guardamos el resultado del golpe
  mixed *temp= keys(attake);
  int c,ret,i,j,z;                   
  int danyo_total = 0;           // Por compatibilidad con combat.c
  object *lista,*armadura,escudo;
  
// ??  this_object()->set_wm_flag(0);
  defensor = defdr;
  atacante = atckr;
  
  for(i=0;i<sizeof(attake);i++)
  {
    att_val=workout_attack(temp[i],attake[temp[i]][1],attake[temp[i]][2],(damage_roll?damage_roll:attake[temp[i]][3]),0,critico); 
    if(att_val[0] == "fumble" )
      if(hacer_pifia()) break;          // Pifia del Ataque. Arma partida
      else continue;                    // Pifia del Ataque. Resto Opcion
    
    if(att_val[0] == "hit") 
      defensor->weapon_damage(-att_val[1],atacante,TO);
    danyo_total = att_val[1];
    write_message(att_val[0],att_val[1], attake[temp[i]][0],atacante, defensor); 
     
   /* Ajuste de las armaduras despues de recibir un atake. Si tienen         */
   /* resistencias a ese atake se desgastaran solo de esa parte. En caso     */
   /* contrario el danyo que recibe es el doble, pues no esta preparada para */ 
   /* aguantar este tipo de golpes.                                          */
   if(!random(80))
     TO->adjust_cond(-1); // Arma
  
   armadura = defensor->query_worn_ob();      // Las cosas vestidas.
   j = sizeof(armadura);                      // Cuantas cosas vestidas hay.  
   escudo = defensor->query_shields_held();  // El defensor tiene escudo.
   if(att_val[1] < 12)          
   /* Si el golpe es de un danyo menor a 12 solo dara al escudo en caso 
    * de que lo lleve :)
    */
      if(escudo->query_ac(temp[i])) escudo->adjust_cond(att_val[1]/3);
      else escudo->adjust_cond(att_val[1]);
   for(z=0;z<j;z++)
     if(armadura->query_ac(temp[i])) armadura->adjust_cond(att_val[1]/(j+1));    
     else armadura->adjust_cond((att_val[1]/(j+1))*3);    
  }
  return danyo_total;
} /* weapon_attack */
