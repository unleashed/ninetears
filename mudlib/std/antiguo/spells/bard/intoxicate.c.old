          /***  Intoxicate Spell  ***/
     /*** Blame this spell on Caanan ***/
 
inherit "/std/spells/patch.c";
 
/* find_unique_match() does a find match that ensures the returned 
   object list contains no duplicates
   find_one_match() returns only the first matched object */
 
mixed find_unique_match(string find,mixed inx);
mixed find_one_match(string find,mixed inx);
 
#define SP_NAME "Intoxicate"
#define GP_COST 4
#define ALCOHOL 0
#define VOLUME 200
#define LVL_FACTOR 10 
#define MAX_DRUNK 1000
 
string help() {
       return
       "\n\n"
       "Spell Name: "+SP_NAME+"\n"
       "Sphere: Mischief\n"
       "Level: 2nd\n"
       "Gp Cost: "+GP_COST+"\n"
       "Description: \n"
        "    This spell renders the target fairly intoxicated.  "
        "Amount of inebriation increases with level of bard.  \n\n";
 
}
 
mixed spell(string str, int skill, int cast, object caster);
 
int cast_spell(string str, object cast)
{
  int skill;
  mixed ret;
  object caster;
 
  caster = cast ? cast : this_player();
 
  str = (string)caster->expand_nickname(str);
 
  ret = spell(str, skill, 1, caster);
  if (stringp(ret))
  {
    notify_fail(ret);
    return 0;
  }
  tell_object(caster, "You start to cast "+SP_NAME+".\n");
  tell_room(environment(caster), caster->query_cap_name()+
            " begins to cast a spell.\n", caster);
  return 1;
  }
 
mixed spell(string str, int skill, int cast, object caster)
{
  mixed ob;
 
  if ((int)caster->query_spell_effect("offensive"))
    return "You are already casting an offensive spell.\n";
  ob = find_one_match(str, environment(caster));
  if (sizeof(ob))
    ob = ob[0];
  else
    ob = 0;
 
  caster->add_spell_effect(1, "offensive", SP_NAME,
    this_object(), "hb_spell", ({ skill,ob,cast }));
  return 1;
}
 
int hb_spell(object caster, mixed *params)
{
  
  if (!params[1])
  {
    tell_object(caster,
      "Your spell failed ... there is no one of that name here.\n");
    return 0;
  }
  if (params[2] && (int)caster->adjust_gp(-GP_COST)<0)
  {
    tell_object(caster, "You can't sing another note.  You should "
    "give yourself a rest.\n");
    return 0;
  }
 
  tell_room(environment(caster), (string)caster->query_cap_name()+
   " sings:\n\n"   
   "   Twenty-four kegs of the King's finest ale,\n"  
   "   If we drank even one, we'd wind up in jail.\n"
   "   Though we'd be merry, our heads in a sail,\n"
   "   At the last we would find our good lunch in a" 
   " pail.\n", ({params[1],caster}));
 
  if(params[1] == caster)
   {
    tell_object(params[1], "You sing:\n\n" 
     "   Twenty-four kegs of the King's finest ale,\n"  
     "   If we drank even one, we'd wind up in jail.\n"
     "   Though we'd be merry, our heads in a sail,\n"
     "   At the last we would find our good lunch in a" 
     " pail.\n\n");
   tell_object(params[1], "You cast "+SP_NAME+" upon yourself.\n");
    tell_room(environment(caster), (string)caster->query_cap_name()+
      " casts a spell upon
      "+params[1]->query_objective()+"self.\n",params[1]);
   }
  else
  {
    tell_object(caster, "\nYou sing:\n\n"
     "   Twenty-four kegs of the King's finest ale,\n"  
     "   If we drank even one, we'd wind up in jail.\n"
     "   Though we'd be merry, our heads in a sail,\n"
     "   At the last we would find our good lunch in a" 
     " pail.\n\n");
 
   tell_object(params[1], (string)caster->query_cap_name() +
   " sings:\n\n"   
   "   Twenty-four kegs of the King's finest ale,\n"  
   "   If we drank even one, we'd wind up in jail.\n"
   "   Though we'd be merry, our heads in a sail,\n"
   "   At the last we would find our good lunch in a" 
   " pail.\n\n");
 
   tell_object(params[1], "You feel quite inebriated.  What a lush!\n");
 
   tell_object(caster, "You cast "+SP_NAME+" on "+
    (string)params[1]->query_cap_name() + ".\n");
 
   tell_room(environment(caster), (string)caster->query_cap_name()+
    " casts a spell upon "+params[1]->query_cap_name()+".\n",
       ({params[1],caster}) );
  }
 
if ((params[1]->query_volume(ALCOHOL)) < MAX_DRUNK)
{
  params[1]->adjust_volume(ALCOHOL, VOLUME+
     ((int)caster->query_level()*LVL_FACTOR));
  
}
  return GP_COST;
}
